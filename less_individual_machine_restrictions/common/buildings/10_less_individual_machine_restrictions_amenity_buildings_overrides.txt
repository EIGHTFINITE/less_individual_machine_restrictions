building_medical_1 = {
	base_buildtime = @b1_time
	base_cap_amount = 1
	category = amenity
	icon = building_medical_1

	building_sets = {
		government
		urban
	}

	allow = {
		NOR = {
			has_modifier = slave_colony
			has_modifier = penal_colony
		}
		owner = {
			is_regular_empire = yes
			is_individual_machine = no
			NOT = {
				has_valid_civic = civic_dystopian_society
			}
		}
		OR = {
			owner = {
				NOT = { is_ai = yes }
			}
			AND = {
				NOT = { has_available_jobs = entertainer }
				NOT = { has_forbidden_jobs = entertainer }
			}
		}
		NOT = { has_building = building_low_tech_capital }
	}

	destroy_trigger = {
		exists = owner
		OR = {
			owner = { is_regular_empire = no }
			AND = {
				buildings_stop_pop = yes
				owner = { is_ai = yes }
			}
		}
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b1_minerals
		}
		upkeep = {
			energy = @b1_upkeep
		}
	}

	inline_script = {
		script = jobs/healthcare_add
		AMOUNT = @building_static_jobs
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				has_country_flag = clone_army_full_potential
				has_active_tradition = tr_cloning_artificial_population_clone_army
			}
		}
		clone_soldiers_sustained = @clones_sustained_low
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				OR = {
					has_purity_heightened_attributes_tradition = yes
					has_cloning_artificial_population_tradition = yes
					has_mutation_somatic_subversiveness_tradition = yes
				}
			}
		}
		pop_bonus_workforce_mult = @medical_workforce_mult
	}

	prerequisites = {
		"tech_basic_health"
	}

	upgrades = {
		building_medical_2
	}
}

building_medical_2 = {
	base_buildtime = @b2_time
	can_build = no

	category = amenity

	building_sets = {
		government
		urban
	}

	potential = {
		exists = owner
		# check the empire is valid
		owner = {
			# rule out gestalts and pre-FTL societies
			is_individual_machine = no
			OR = {
				is_regular_empire = yes
				AND = {
					has_origin = origin_fear_of_the_dark
					is_country_type = primitive
				}
			}
			# rule out AI empires with entirely no access to "Pharma State" Civic, unless the planet is unstable
			OR = {
				is_ai = no
				has_valid_civic = civic_private_healthcare_corporate
				root = {
					if = {
						limit = {
							has_branch_office = yes
						}
						branch_office_owner = {
							has_valid_civic = civic_private_healthcare_corporate
						}
					}
				}
				root = {
					NOT = { has_available_jobs = entertainer }
					NOT = { has_forbidden_jobs = entertainer }
					planet_stability < 50
					free_amenities < 0
				}
			}
		}
	}

	destroy_trigger = {
		OR = {
			# if the planet is owned by a gestalt or pre-FTL society
			AND = {
				exists = owner
				owner = {
					OR = {
						is_regular_empire = no
						AND = {
							is_country_type = primitive
							NOT = { has_origin = origin_fear_of_the_dark }
						}
					}
				}
			}
			# if this is an AI-controlled empire with entirely no access to "Pharma State" Civic, assuming the planet is now stable
			AND = {
				exists = owner
				owner = {
					is_ai = yes
					NOT = {
						OR = {
							has_valid_civic = civic_private_healthcare_corporate
							prev = {
								has_branch_office = yes
								branch_office_owner = {
									has_valid_civic = civic_private_healthcare_corporate
								}
							}
						}
					}
				}
				planet_stability > 70
				free_amenities > 20
			}
		}
	}

	inline_script = {
		script = jobs/healthcare_add
		AMOUNT = @building_static_jobs
	}

	planet_modifier = {
		planet_doctors_upkeep_mult = -0.20
		pop_amenities_usage_organic_mult = -0.10
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				has_technology = tech_gene_tailoring
			}
			any_owned_pop_group = {
				has_auto_modding_trait = yes
			}
		}
		modifier = {
			auto_mod_monthly_add = 100
		}
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				game_start_auto_mod_empire = yes
			}
			any_owned_pop_group = {
				has_auto_modding_trait = yes
			}
		}
		modifier = {
			auto_mod_monthly_add = 100
		}
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				has_country_flag = clone_army_full_potential
				has_active_tradition = tr_cloning_artificial_population_clone_army
			}
		}
		clone_soldiers_sustained = @clones_sustained_low
		mult = 2
	}

	triggered_planet_modifier = {
		potential = {
			exists = owner
			owner = {
				OR = {
					has_purity_heightened_attributes_tradition = yes
					has_cloning_artificial_population_tradition = yes
					has_mutation_somatic_subversiveness_tradition = yes
				}
			}
		}
		pop_bonus_workforce_mult = @medical_workforce_mult
		mult = 2
	}

	resources = {
		category = planet_buildings
		cost = {
			minerals = @b2_minerals
			exotic_gases = @b2_rare_cost
		}
		upkeep = {
			energy = @b2_upkeep
		}
		upkeep = {
			trigger = {
				num_zones = {
					type = zone_payback_enlightenment
					value = 0
				}
			}
			exotic_gases = @b2_rare_upkeep
		}
	}

	prerequisites = {
		"tech_frontier_health"
	}

	on_destroy = {
		owner = {
			if = {
				limit = {
					has_event_chain = payback_out_of_warranty_chain
				}
				end_event_chain = payback_out_of_warranty_chain
			}
		}
	}

	on_repaired = {
		if = {
			limit = {
				planet.owner = {
					has_event_chain = payback_out_of_warranty_chain
				}
			}
			random_list = {
				50 = { # still broken
					planet.owner = {
						country_event = { id = origin.4302 }
					}
					modifier = {
						factor = 0
						planet.owner = { has_technology = tech_frontier_health }
					}
				}
				20 = { # repaired
					planet.owner = {
						country_event = { id = origin.4301 }
					}
					modifier = {
						factor = 2
						planet.owner = { num_research_agreements = 1 }
					}
					modifier = {
						factor = 3
						planet.owner = { num_research_agreements = 2 }
					}
					modifier = {
						factor = 4
						planet.owner = { num_research_agreements >= 3 }
					}
				}
				10 = { # broken beyond repair
					planet = {
						planet_event = { id = origin.4303 }
					}
				}
			}
		}
	}

	upgrades = {
		building_medical_3
	}
}
